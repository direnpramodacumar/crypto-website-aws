
//Import AWS
let AWS = require("aws-sdk");


//Data that we are going to send to endpoint
let endpointData = {
    "instances":
        [
            {
                "start":"2019-03-21 08:00:00","cat":0,"target":[3067,3070.04,3074.08,3082.73,3080.16,3064.88,3015.03,3038.54,3042.34,3050.93,3043.79,3044.99,3039.72,3049.73,3046.25,3048.32,3047.62,3040.44,3040.78,3037.7,3033.21,3036.23,3036.79,3035.15,3045.28,3045.84,3037.78,3037.91,3037.36,3038.57,3044.41,3032.18,3033.17,3037.78,3035.76,3035.89,3025.84,3030.96,3031.11,3031.65,3026.61,3030.42,3035.53,3026.09,3026.19,3032.62,3037.07,3036.84,3028.38,3031.41,3024.98,3029.97,3032.43,3029.67,3022.61,3029.54,3025.25,3025.35,3023.95,3023.64,3026.98,3018.04,3025.35,3033.26,3026.17,3023.79,3021.41,3020.1,3018.04,3016.37,3016.33,3023.97,3018.21,3027.35,3019.03,3013.06,3012.71,3014.61,3019.07,3022.1,3016.37,3012.22,3018.93,3013.32,3011.72,3016.94,3013.73,3012.14,3011.98,3025.44,3024.51,3016.8,3018.85,3017.28,3022.74,3015.52,3013.76,3018.85,3016.6,3018.64,3005.77]
            },  
            {   
                 "start":"2019-03-21 08:00:00","cat":1,"target":[105.48,105.79,105.48,105.8,105.79,104.82,102.1,103.45,103.2,103.58,103.56,103.43,103.98,103.8,103.49,103.26,103.07,102.89,102.88,103.31,103.04,102.95,103.15,103.87,103.98,103.88,103.93,103.8,104.48,104.01,104.24,103.61,103.56,104.12,103.85,103.99,103.75,103.63,103.41,103.45,103.39,103.34,103.61,103.75,103.11,103.52,103.91,104.18,104.75,105.09,104.29,104.35,103.78,103.34,103.41,103.41,103.49,103.48,103.36,103.61,103.28,103.86,103.51,103.92,103.64,103.85,103.63,102.97,103.52,103.23,102.88,103.12,103.48,104.03,103.32,103.62,103.37,103.71,102.94,103.73,102.81,102.88,103.01,102.41,102.33,102.81,103.32,103.03,102.85,102.86,102.92,103.01,103.28,102.74,102.96,103.16,102.94,102.65,102.85,102.88,102.13]
            },
            {  
                "start":"2019-03-21 08:00:00","cat":2,"target":[0.2397,0.2401,0.2406,0.2411,0.2406,0.2389,0.2329,0.2366,0.2355,0.2366,0.2365,0.2366,0.2366,0.2374,0.2372,0.2372,0.2353,0.2355,0.2359,0.2358,0.2348,0.2359,0.2354,0.2348,0.2363,0.2364,0.2365,0.236,0.2367,0.2361,0.2373,0.2361,0.2368,0.2367,0.2363,0.237,0.236,0.2358,0.2356,0.2359,0.2348,0.2352,0.2358,0.2346,0.2347,0.2352,0.2363,0.2362,0.2351,0.2354,0.2347,0.2354,0.2366,0.236,0.2353,0.2359,0.2353,0.2354,0.2351,0.235,0.2353,0.2344,0.2353,0.236,0.235,0.2348,0.2346,0.2344,0.2346,0.2343,0.2343,0.2341,0.2338,0.2342,0.2332,0.2331,0.2326,0.2331,0.2334,0.2337,0.2332,0.2327,0.2331,0.2318,0.2323,0.2325,0.2324,0.2323,0.232,0.2329,0.2328,0.2319,0.232,0.2317,0.2317,0.2307,0.231,0.2321,0.2317,0.2318,0.2305]
                
            },
            {
                "start":"2019-03-21 08:00:00","cat":3,"target":[45.55,45.5,45.47,45.6,45.35,44.87,43.91,44.6,44.62,44.7,44.56,44.63,44.59,44.73,44.76,44.72,44.59,44.6,44.55,44.5,44.48,44.63,44.59,44.33,44.77,44.73,44.6,44.62,44.99,45.04,45.04,44.94,44.89,44.89,44.98,44.84,44.84,44.81,44.94,45,44.86,44.94,44.78,44.9,45.01,44.9,45.72,45.65,45.73,45.83,45.25,45.45,45.71,45.31,45.35,45.7,45.61,45.69,45.52,45.55,45.55,45.52,45.7,45.7,45.53,45.52,45.5,45.49,45.49,45.45,45.22,44.83,45.03,45.35,45.14,45.2,45.08,45.22,45.23,45.11,44.8,45.07,45.11,44.97,45.1,45.03,45.18,45.16,44.93,45.44,45.6,45.39,45.11,45.37,45.36,45.08,44.89,45.02,44.89,45.01,44.85]
                
            },
            {
                "start":"2019-03-21 08:00:00","cat":4,"target":[2.81,2.82,2.81,2.82,2.82,2.78,2.72,2.76,2.75,2.76,2.76,2.76,2.77,2.78,2.77,2.77,2.76,2.75,2.76,2.76,2.75,2.75,2.74,2.75,2.76,2.76,2.75,2.76,2.78,2.76,2.76,2.75,2.75,2.76,2.75,2.75,2.75,2.75,2.75,2.75,2.75,2.74,2.76,2.75,2.74,2.75,2.79,2.79,2.8,2.8,2.78,2.79,2.77,2.76,2.76,2.76,2.76,2.75,2.75,2.76,2.75,2.77,2.77,2.78,2.76,2.77,2.76,2.74,2.75,2.73,2.73,2.73,2.74,2.77,2.75,2.75,2.75,2.76,2.73,2.75,2.74,2.74,2.75,2.72,2.73,2.75,2.76,2.75,2.74,2.75,2.76,2.77,2.77,2.76,2.75,2.76,2.76,2.74,2.75,2.75,2.73]
            }
                
            
        ],
    "configuration":
        {
            "num_samples": 50,
            "output_types":["mean","quantiles","samples"],
            "quantiles":["0.1","0.9"]
        }
};

//Name of endpoint
const endpointName = "crypto-endpoint";

//Parameters for calling endpoint
let params = {
    EndpointName: endpointName,
    Body: JSON.stringify(endpointData),
    ContentType: "application/json",
    Accept: "application/json"
};

//AWS class that will query endpoint
let awsRuntime = new AWS.SageMakerRuntime({});

//Handler for Lambda function
exports.handler =  event => {
    //Call endpoint and handle response
    awsRuntime.invokeEndpoint(params, (err, data)=>{
        if (err) {//An error occurred
            console.log(err, err.stack);

            //Return error response
            const response = {
                statusCode: 500,
                body: JSON.stringify('ERROR: ' + JSON.stringify(err)),
            };
            return response;
        }
        else{//Successful response
            //Convert response data to JSON
            let responseData = JSON.parse(Buffer.from(data.Body).toString('utf8'));
            console.log(JSON.stringify(responseData));
            
            let values = [];
                 for(let i = 0; i<5; i++){
                    let obj = {};
                    obj['price'] = responseData.predictions[i].mean;
                    values.push(obj);
            }
            //Create new DocumentClient
            let documentClient = new AWS.DynamoDB.DocumentClient();
            
            //List of cryptocoins
            let cryptoNamesArray = ["Bitcoin","Etherium","Ripple","Litecoin","EOS"];
            //Table name and data for table
            for (let j = 0; j < 5; j++) {
                for (let i = 0; i < 40; i++) {
                    let params = {
                        TableName: "CryptoDataPredictions",
                        Item: {
                            Time:i+1,
                            Currency:cryptoNamesArray[j],
                            Value:values[j].price[i]
                        }
                    }
                     //Store data in DynamoDB and handle errors
                    documentClient.put(params, (err, data) => {
                        if (err) {
                          console.log("Unable to add item: " +  JSON.stringify(err));
                        }
                        else {
                               console.log("Prediction added to the table" );
                        }
    
                    })
                }
            }

            //Return successful response
            const response = {
                statusCode: 200,
                body: JSON.stringify('Crypto Predictions stored.'),
            };
            return response;
        }
    });
};

